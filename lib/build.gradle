/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.6/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Charting api/runtime
    implementation group: 'org.jfree', name: 'jfreechart', version: '1.0.17'
// persistence API
    implementation group: 'jakarta.persistence', name: 'jakarta.persistence-api', version: '3.0.0'
    implementation group: 'org.eclipse.persistence', name: 'eclipselink', version: '3.0.2'
// DBMS
    implementation group: 'org.apache.derby', name: 'derby', version: '10.15.2.0'
    implementation group: 'org.apache.derby', name: 'derbyshared', version: '10.15.2.0'

    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api libs.commons.math3

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation libs.guava

    implementation 'org.junit.jupiter:junit-jupiter-api:5..8.1'
    implementation 'org.junit.jupiter:junit-jupiter-engine:5.8.1'

}

test {
    useJUnitPlatform()
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

    tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

// Make sure gradle (also) places resource files where IntelliJ wants them
sourceSets.main.output.resourcesDir = sourceSets.main.output.classesDirs.asPath
compileJava.dependsOn(processResources)

jar {
    // Set the desired JAR name using the archiveName property
    archiveBaseName.set("badbm")

    // Configure the manifest with the Main-Class attribute
    manifest {
        attributes "Main-Class": "edu.touro.mco152.bm.App"
    }

    // Set the duplicatesStrategy to EXCLUDE to handle duplicate files
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    // Include dependencies from the runtime classpath
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}